--
-- Test partitioning planner code
--
create table lp (a char) partition by list (a);
create table lp_default partition of lp default;
create table lp_ef partition of lp for values in ('e', 'f');
create table lp_ad partition of lp for values in ('a', 'd');
create table lp_bc partition of lp for values in ('b', 'c');
create table lp_g partition of lp for values in ('g');
create table lp_null partition of lp for values in (null);
explain (costs off) select * from lp;
             QUERY PLAN             
------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on lp_ad
         ->  Seq Scan on lp_bc
         ->  Seq Scan on lp_ef
         ->  Seq Scan on lp_g
         ->  Seq Scan on lp_null
         ->  Seq Scan on lp_default
(9 rows)

explain (costs off) select * from lp where a > 'a' and a < 'd';
                           QUERY PLAN                            
-----------------------------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on lp_bc
               Filter: ((a > 'a'::bpchar) AND (a < 'd'::bpchar))
         ->  Seq Scan on lp_default
               Filter: ((a > 'a'::bpchar) AND (a < 'd'::bpchar))
(7 rows)

explain (costs off) select * from lp where a > 'a' and a <= 'd';
                            QUERY PLAN                            
------------------------------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on lp_ad
               Filter: ((a > 'a'::bpchar) AND (a <= 'd'::bpchar))
         ->  Seq Scan on lp_bc
               Filter: ((a > 'a'::bpchar) AND (a <= 'd'::bpchar))
         ->  Seq Scan on lp_default
               Filter: ((a > 'a'::bpchar) AND (a <= 'd'::bpchar))
(9 rows)

explain (costs off) select * from lp where a = 'a';
               QUERY PLAN                
-----------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_2
   ->  Append
         ->  Seq Scan on lp_ad
               Filter: (a = 'a'::bpchar)
(5 rows)

explain (costs off) select * from lp where 'a' = a;	/* commuted */
               QUERY PLAN                
-----------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_2
   ->  Append
         ->  Seq Scan on lp_ad
               Filter: ('a'::bpchar = a)
(5 rows)

explain (costs off) select * from lp where a is not null;
              QUERY PLAN               
---------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on lp_ad
               Filter: (a IS NOT NULL)
         ->  Seq Scan on lp_bc
               Filter: (a IS NOT NULL)
         ->  Seq Scan on lp_ef
               Filter: (a IS NOT NULL)
         ->  Seq Scan on lp_g
               Filter: (a IS NOT NULL)
         ->  Seq Scan on lp_default
               Filter: (a IS NOT NULL)
(13 rows)

explain (costs off) select * from lp where a is null;
            QUERY PLAN             
-----------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on lp_null
               Filter: (a IS NULL)
(5 rows)

explain (costs off) select * from lp where a = 'a' or a = 'c';
                           QUERY PLAN                           
----------------------------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on lp_ad
               Filter: ((a = 'a'::bpchar) OR (a = 'c'::bpchar))
         ->  Seq Scan on lp_bc
               Filter: ((a = 'a'::bpchar) OR (a = 'c'::bpchar))
(7 rows)

explain (costs off) select * from lp where a is not null and (a = 'a' or a = 'c');
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on lp_ad
               Filter: ((a IS NOT NULL) AND ((a = 'a'::bpchar) OR (a = 'c'::bpchar)))
         ->  Seq Scan on lp_bc
               Filter: ((a IS NOT NULL) AND ((a = 'a'::bpchar) OR (a = 'c'::bpchar)))
(7 rows)

explain (costs off) select * from lp where a <> 'g';
                QUERY PLAN                
------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on lp_ad
               Filter: (a <> 'g'::bpchar)
         ->  Seq Scan on lp_bc
               Filter: (a <> 'g'::bpchar)
         ->  Seq Scan on lp_ef
               Filter: (a <> 'g'::bpchar)
         ->  Seq Scan on lp_default
               Filter: (a <> 'g'::bpchar)
(11 rows)

explain (costs off) select * from lp where a <> 'a' and a <> 'd';
                            QUERY PLAN                             
-------------------------------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on lp_bc
               Filter: ((a <> 'a'::bpchar) AND (a <> 'd'::bpchar))
         ->  Seq Scan on lp_ef
               Filter: ((a <> 'a'::bpchar) AND (a <> 'd'::bpchar))
         ->  Seq Scan on lp_g
               Filter: ((a <> 'a'::bpchar) AND (a <> 'd'::bpchar))
         ->  Seq Scan on lp_default
               Filter: ((a <> 'a'::bpchar) AND (a <> 'd'::bpchar))
(11 rows)

explain (costs off) select * from lp where a not in ('a', 'd');
                      QUERY PLAN                      
------------------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on lp_bc
               Filter: (a <> ALL ('{a,d}'::bpchar[]))
         ->  Seq Scan on lp_ef
               Filter: (a <> ALL ('{a,d}'::bpchar[]))
         ->  Seq Scan on lp_g
               Filter: (a <> ALL ('{a,d}'::bpchar[]))
         ->  Seq Scan on lp_default
               Filter: (a <> ALL ('{a,d}'::bpchar[]))
(11 rows)

-- collation matches the partitioning collation, pruning works
create table coll_pruning (a text collate "C") partition by list (a);
create table coll_pruning_a partition of coll_pruning for values in ('a');
create table coll_pruning_b partition of coll_pruning for values in ('b');
create table coll_pruning_def partition of coll_pruning default;
explain (costs off) select * from coll_pruning where a collate "C" = 'a' collate "C";
                    QUERY PLAN                     
---------------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on coll_pruning_a
               Filter: (a = 'a'::text COLLATE "C")
(5 rows)

-- collation doesn't match the partitioning collation, no pruning occurs
explain (costs off) select * from coll_pruning where a collate "POSIX" = 'a' collate "POSIX";
                          QUERY PLAN                           
---------------------------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on coll_pruning_a
               Filter: ((a)::text = 'a'::text COLLATE "POSIX")
         ->  Seq Scan on coll_pruning_b
               Filter: ((a)::text = 'a'::text COLLATE "POSIX")
         ->  Seq Scan on coll_pruning_def
               Filter: ((a)::text = 'a'::text COLLATE "POSIX")
(9 rows)

create table rlp (a int, b varchar) partition by range (a);
create table rlp_default partition of rlp default partition by list (a);
create table rlp_default_default partition of rlp_default default;
create table rlp_default_10 partition of rlp_default for values in (10);
create table rlp_default_30 partition of rlp_default for values in (30);
create table rlp_default_null partition of rlp_default for values in (null);
create table rlp1 partition of rlp for values from (minvalue) to (1);
create table rlp2 partition of rlp for values from (1) to (10);
create table rlp3 (a int, b varchar) partition by list (b varchar_ops);
create table rlp3_default partition of rlp3 default;
create table rlp3abcd partition of rlp3 for values in ('ab', 'cd');
create table rlp3efgh partition of rlp3 for values in ('ef', 'gh');
create table rlp3nullxy partition of rlp3 for values in (null, 'xy');
alter table rlp attach partition rlp3 for values from (15) to (20);
create table rlp4 partition of rlp for values from (20) to (30) partition by range (a);
create table rlp4_default partition of rlp4 default;
create table rlp4_1 partition of rlp4 for values from (20) to (25);
create table rlp4_2 partition of rlp4 for values from (25) to (29);
create table rlp5 partition of rlp for values from (31) to (maxvalue) partition by range (a);
create table rlp5_default partition of rlp5 default;
create table rlp5_1 partition of rlp5 for values from (31) to (40);
explain (costs off) select * from rlp where a < 1;
            QUERY PLAN            
----------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on rlp1
               Filter: (a < 1)
(5 rows)

explain (costs off) select * from rlp where 1 > a;	/* commuted */
            QUERY PLAN            
----------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on rlp1
               Filter: (1 > a)
(5 rows)

explain (costs off) select * from rlp where a <= 1;
            QUERY PLAN            
----------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on rlp1
               Filter: (a <= 1)
         ->  Seq Scan on rlp2
               Filter: (a <= 1)
(7 rows)

explain (costs off) select * from rlp where a = 1;
          QUERY PLAN           
-------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1
   ->  Append
         ->  Seq Scan on rlp2
               Filter: (a = 1)
(5 rows)

explain (costs off) select * from rlp where a = 1::bigint;		/* same as above */
               QUERY PLAN                
-----------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1
   ->  Append
         ->  Seq Scan on rlp2
               Filter: (a = '1'::bigint)
(5 rows)

explain (costs off) select * from rlp where a = 1::numeric;	/* no pruning */
                     QUERY PLAN                      
-----------------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on rlp1
               Filter: ((a)::numeric = '1'::numeric)
         ->  Seq Scan on rlp2
               Filter: ((a)::numeric = '1'::numeric)
         ->  Seq Scan on rlp3abcd
               Filter: ((a)::numeric = '1'::numeric)
         ->  Seq Scan on rlp3efgh
               Filter: ((a)::numeric = '1'::numeric)
         ->  Seq Scan on rlp3nullxy
               Filter: ((a)::numeric = '1'::numeric)
         ->  Seq Scan on rlp3_default
               Filter: ((a)::numeric = '1'::numeric)
         ->  Seq Scan on rlp4_1
               Filter: ((a)::numeric = '1'::numeric)
         ->  Seq Scan on rlp4_2
               Filter: ((a)::numeric = '1'::numeric)
         ->  Seq Scan on rlp4_default
               Filter: ((a)::numeric = '1'::numeric)
         ->  Seq Scan on rlp5_1
               Filter: ((a)::numeric = '1'::numeric)
         ->  Seq Scan on rlp5_default
               Filter: ((a)::numeric = '1'::numeric)
         ->  Seq Scan on rlp_default_10
               Filter: ((a)::numeric = '1'::numeric)
         ->  Seq Scan on rlp_default_30
               Filter: ((a)::numeric = '1'::numeric)
         ->  Seq Scan on rlp_default_null
               Filter: ((a)::numeric = '1'::numeric)
         ->  Seq Scan on rlp_default_default
               Filter: ((a)::numeric = '1'::numeric)
(33 rows)

explain (costs off) select * from rlp where a <= 10;
                 QUERY PLAN                  
---------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on rlp1
               Filter: (a <= 10)
         ->  Seq Scan on rlp2
               Filter: (a <= 10)
         ->  Seq Scan on rlp_default_10
               Filter: (a <= 10)
         ->  Seq Scan on rlp_default_default
               Filter: (a <= 10)
(11 rows)

explain (costs off) select * from rlp where a > 10;
                 QUERY PLAN                  
---------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on rlp3abcd
               Filter: (a > 10)
         ->  Seq Scan on rlp3efgh
               Filter: (a > 10)
         ->  Seq Scan on rlp3nullxy
               Filter: (a > 10)
         ->  Seq Scan on rlp3_default
               Filter: (a > 10)
         ->  Seq Scan on rlp4_1
               Filter: (a > 10)
         ->  Seq Scan on rlp4_2
               Filter: (a > 10)
         ->  Seq Scan on rlp4_default
               Filter: (a > 10)
         ->  Seq Scan on rlp5_1
               Filter: (a > 10)
         ->  Seq Scan on rlp5_default
               Filter: (a > 10)
         ->  Seq Scan on rlp_default_30
               Filter: (a > 10)
         ->  Seq Scan on rlp_default_default
               Filter: (a > 10)
(25 rows)

explain (costs off) select * from rlp where a < 15;
                 QUERY PLAN                  
---------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on rlp1
               Filter: (a < 15)
         ->  Seq Scan on rlp2
               Filter: (a < 15)
         ->  Seq Scan on rlp_default_10
               Filter: (a < 15)
         ->  Seq Scan on rlp_default_default
               Filter: (a < 15)
(11 rows)

explain (costs off) select * from rlp where a <= 15;
                 QUERY PLAN                  
---------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on rlp1
               Filter: (a <= 15)
         ->  Seq Scan on rlp2
               Filter: (a <= 15)
         ->  Seq Scan on rlp3abcd
               Filter: (a <= 15)
         ->  Seq Scan on rlp3efgh
               Filter: (a <= 15)
         ->  Seq Scan on rlp3nullxy
               Filter: (a <= 15)
         ->  Seq Scan on rlp3_default
               Filter: (a <= 15)
         ->  Seq Scan on rlp_default_10
               Filter: (a <= 15)
         ->  Seq Scan on rlp_default_default
               Filter: (a <= 15)
(19 rows)

explain (costs off) select * from rlp where a > 15 and b = 'ab';
                          QUERY PLAN                           
---------------------------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on rlp3abcd
               Filter: ((a > 15) AND ((b)::text = 'ab'::text))
         ->  Seq Scan on rlp4_1
               Filter: ((a > 15) AND ((b)::text = 'ab'::text))
         ->  Seq Scan on rlp4_2
               Filter: ((a > 15) AND ((b)::text = 'ab'::text))
         ->  Seq Scan on rlp4_default
               Filter: ((a > 15) AND ((b)::text = 'ab'::text))
         ->  Seq Scan on rlp5_1
               Filter: ((a > 15) AND ((b)::text = 'ab'::text))
         ->  Seq Scan on rlp5_default
               Filter: ((a > 15) AND ((b)::text = 'ab'::text))
         ->  Seq Scan on rlp_default_30
               Filter: ((a > 15) AND ((b)::text = 'ab'::text))
         ->  Seq Scan on rlp_default_default
               Filter: ((a > 15) AND ((b)::text = 'ab'::text))
(19 rows)

explain (costs off) select * from rlp where a = 16;
              QUERY PLAN              
--------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_2
   ->  Append
         ->  Seq Scan on rlp3abcd
               Filter: (a = 16)
         ->  Seq Scan on rlp3efgh
               Filter: (a = 16)
         ->  Seq Scan on rlp3nullxy
               Filter: (a = 16)
         ->  Seq Scan on rlp3_default
               Filter: (a = 16)
(11 rows)

explain (costs off) select * from rlp where a = 16 and b in ('not', 'in', 'here');
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_2
   ->  Append
         ->  Seq Scan on rlp3_default
               Filter: ((a = 16) AND ((b)::text = ANY ('{not,in,here}'::text[])))
(5 rows)

explain (costs off) select * from rlp where a = 16 and b < 'ab';
                          QUERY PLAN                           
---------------------------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_2
   ->  Append
         ->  Seq Scan on rlp3_default
               Filter: (((b)::text < 'ab'::text) AND (a = 16))
(5 rows)

explain (costs off) select * from rlp where a = 16 and b <= 'ab';
                           QUERY PLAN                           
----------------------------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_2
   ->  Append
         ->  Seq Scan on rlp3abcd
               Filter: (((b)::text <= 'ab'::text) AND (a = 16))
         ->  Seq Scan on rlp3_default
               Filter: (((b)::text <= 'ab'::text) AND (a = 16))
(7 rows)

explain (costs off) select * from rlp where a = 16 and b is null;
                    QUERY PLAN                    
--------------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_2
   ->  Append
         ->  Seq Scan on rlp3nullxy
               Filter: ((b IS NULL) AND (a = 16))
(5 rows)

explain (costs off) select * from rlp where a = 16 and b is not null;
                      QUERY PLAN                      
------------------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_2
   ->  Append
         ->  Seq Scan on rlp3abcd
               Filter: ((b IS NOT NULL) AND (a = 16))
         ->  Seq Scan on rlp3efgh
               Filter: ((b IS NOT NULL) AND (a = 16))
         ->  Seq Scan on rlp3nullxy
               Filter: ((b IS NOT NULL) AND (a = 16))
         ->  Seq Scan on rlp3_default
               Filter: ((b IS NOT NULL) AND (a = 16))
(11 rows)

explain (costs off) select * from rlp where a is null;
                QUERY PLAN                
------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on rlp_default_null
               Filter: (a IS NULL)
(5 rows)

explain (costs off) select * from rlp where a is not null;
                 QUERY PLAN                  
---------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on rlp1
               Filter: (a IS NOT NULL)
         ->  Seq Scan on rlp2
               Filter: (a IS NOT NULL)
         ->  Seq Scan on rlp3abcd
               Filter: (a IS NOT NULL)
         ->  Seq Scan on rlp3efgh
               Filter: (a IS NOT NULL)
         ->  Seq Scan on rlp3nullxy
               Filter: (a IS NOT NULL)
         ->  Seq Scan on rlp3_default
               Filter: (a IS NOT NULL)
         ->  Seq Scan on rlp4_1
               Filter: (a IS NOT NULL)
         ->  Seq Scan on rlp4_2
               Filter: (a IS NOT NULL)
         ->  Seq Scan on rlp4_default
               Filter: (a IS NOT NULL)
         ->  Seq Scan on rlp5_1
               Filter: (a IS NOT NULL)
         ->  Seq Scan on rlp5_default
               Filter: (a IS NOT NULL)
         ->  Seq Scan on rlp_default_10
               Filter: (a IS NOT NULL)
         ->  Seq Scan on rlp_default_30
               Filter: (a IS NOT NULL)
         ->  Seq Scan on rlp_default_default
               Filter: (a IS NOT NULL)
(31 rows)

explain (costs off) select * from rlp where a > 30;
                 QUERY PLAN                  
---------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on rlp5_1
               Filter: (a > 30)
         ->  Seq Scan on rlp5_default
               Filter: (a > 30)
         ->  Seq Scan on rlp_default_default
               Filter: (a > 30)
(9 rows)

explain (costs off) select * from rlp where a = 30;	/* only default is scanned */
               QUERY PLAN               
----------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_2
   ->  Append
         ->  Seq Scan on rlp_default_30
               Filter: (a = 30)
(5 rows)

explain (costs off) select * from rlp where a <= 31;
                 QUERY PLAN                  
---------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on rlp1
               Filter: (a <= 31)
         ->  Seq Scan on rlp2
               Filter: (a <= 31)
         ->  Seq Scan on rlp3abcd
               Filter: (a <= 31)
         ->  Seq Scan on rlp3efgh
               Filter: (a <= 31)
         ->  Seq Scan on rlp3nullxy
               Filter: (a <= 31)
         ->  Seq Scan on rlp3_default
               Filter: (a <= 31)
         ->  Seq Scan on rlp4_1
               Filter: (a <= 31)
         ->  Seq Scan on rlp4_2
               Filter: (a <= 31)
         ->  Seq Scan on rlp4_default
               Filter: (a <= 31)
         ->  Seq Scan on rlp5_1
               Filter: (a <= 31)
         ->  Seq Scan on rlp_default_10
               Filter: (a <= 31)
         ->  Seq Scan on rlp_default_30
               Filter: (a <= 31)
         ->  Seq Scan on rlp_default_default
               Filter: (a <= 31)
(29 rows)

explain (costs off) select * from rlp where a = 1 or a = 7;
                 QUERY PLAN                 
--------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on rlp2
               Filter: ((a = 1) OR (a = 7))
(5 rows)

explain (costs off) select * from rlp where a = 1 or b = 'ab';
                         QUERY PLAN                          
-------------------------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on rlp1
               Filter: ((a = 1) OR ((b)::text = 'ab'::text))
         ->  Seq Scan on rlp2
               Filter: ((a = 1) OR ((b)::text = 'ab'::text))
         ->  Seq Scan on rlp3abcd
               Filter: ((a = 1) OR ((b)::text = 'ab'::text))
         ->  Seq Scan on rlp4_1
               Filter: ((a = 1) OR ((b)::text = 'ab'::text))
         ->  Seq Scan on rlp4_2
               Filter: ((a = 1) OR ((b)::text = 'ab'::text))
         ->  Seq Scan on rlp4_default
               Filter: ((a = 1) OR ((b)::text = 'ab'::text))
         ->  Seq Scan on rlp5_1
               Filter: ((a = 1) OR ((b)::text = 'ab'::text))
         ->  Seq Scan on rlp5_default
               Filter: ((a = 1) OR ((b)::text = 'ab'::text))
         ->  Seq Scan on rlp_default_10
               Filter: ((a = 1) OR ((b)::text = 'ab'::text))
         ->  Seq Scan on rlp_default_30
               Filter: ((a = 1) OR ((b)::text = 'ab'::text))
         ->  Seq Scan on rlp_default_null
               Filter: ((a = 1) OR ((b)::text = 'ab'::text))
         ->  Seq Scan on rlp_default_default
               Filter: ((a = 1) OR ((b)::text = 'ab'::text))
(27 rows)

explain (costs off) select * from rlp where a > 20 and a < 27;
                  QUERY PLAN                   
-----------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on rlp4_1
               Filter: ((a > 20) AND (a < 27))
         ->  Seq Scan on rlp4_2
               Filter: ((a > 20) AND (a < 27))
(7 rows)

explain (costs off) select * from rlp where a = 29;
              QUERY PLAN              
--------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_2
   ->  Append
         ->  Seq Scan on rlp4_default
               Filter: (a = 29)
(5 rows)

explain (costs off) select * from rlp where a >= 29;
                 QUERY PLAN                  
---------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on rlp4_default
               Filter: (a >= 29)
         ->  Seq Scan on rlp5_1
               Filter: (a >= 29)
         ->  Seq Scan on rlp5_default
               Filter: (a >= 29)
         ->  Seq Scan on rlp_default_30
               Filter: (a >= 29)
         ->  Seq Scan on rlp_default_default
               Filter: (a >= 29)
(13 rows)

explain (costs off) select * from rlp where a < 1 or (a > 20 and a < 25);
                         QUERY PLAN                         
------------------------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on rlp1
               Filter: ((a < 1) OR ((a > 20) AND (a < 25)))
         ->  Seq Scan on rlp4_1
               Filter: ((a < 1) OR ((a > 20) AND (a < 25)))
(7 rows)

-- redundant clauses are eliminated
explain (costs off) select * from rlp where a > 1 and a = 10;	/* only default */
                  QUERY PLAN                  
----------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_2
   ->  Append
         ->  Seq Scan on rlp_default_10
               Filter: ((a > 1) AND (a = 10))
(5 rows)

explain (costs off) select * from rlp where a > 1 and a >=15;	/* rlp3 onwards, including default */
                  QUERY PLAN                   
-----------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on rlp3abcd
               Filter: ((a > 1) AND (a >= 15))
         ->  Seq Scan on rlp3efgh
               Filter: ((a > 1) AND (a >= 15))
         ->  Seq Scan on rlp3nullxy
               Filter: ((a > 1) AND (a >= 15))
         ->  Seq Scan on rlp3_default
               Filter: ((a > 1) AND (a >= 15))
         ->  Seq Scan on rlp4_1
               Filter: ((a > 1) AND (a >= 15))
         ->  Seq Scan on rlp4_2
               Filter: ((a > 1) AND (a >= 15))
         ->  Seq Scan on rlp4_default
               Filter: ((a > 1) AND (a >= 15))
         ->  Seq Scan on rlp5_1
               Filter: ((a > 1) AND (a >= 15))
         ->  Seq Scan on rlp5_default
               Filter: ((a > 1) AND (a >= 15))
         ->  Seq Scan on rlp_default_30
               Filter: ((a > 1) AND (a >= 15))
         ->  Seq Scan on rlp_default_default
               Filter: ((a > 1) AND (a >= 15))
(25 rows)

explain (costs off) select * from rlp where a = 1 and a = 3;	/* empty */
           QUERY PLAN           
--------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1
   ->  Result
         One-Time Filter: false
(4 rows)

explain (costs off) select * from rlp where (a = 1 and a = 3) or (a > 1 and a = 15);
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on rlp2
               Filter: (((a = 1) AND (a = 3)) OR ((a > 1) AND (a = 15)))
         ->  Seq Scan on rlp3abcd
               Filter: (((a = 1) AND (a = 3)) OR ((a > 1) AND (a = 15)))
         ->  Seq Scan on rlp3efgh
               Filter: (((a = 1) AND (a = 3)) OR ((a > 1) AND (a = 15)))
         ->  Seq Scan on rlp3nullxy
               Filter: (((a = 1) AND (a = 3)) OR ((a > 1) AND (a = 15)))
         ->  Seq Scan on rlp3_default
               Filter: (((a = 1) AND (a = 3)) OR ((a > 1) AND (a = 15)))
(13 rows)

-- multi-column keys
create table mc3p (a int, b int, c int) partition by range (a, abs(b), c);
create table mc3p_default partition of mc3p default;
create table mc3p0 partition of mc3p for values from (minvalue, minvalue, minvalue) to (1, 1, 1);
create table mc3p1 partition of mc3p for values from (1, 1, 1) to (10, 5, 10);
create table mc3p2 partition of mc3p for values from (10, 5, 10) to (10, 10, 10);
create table mc3p3 partition of mc3p for values from (10, 10, 10) to (10, 10, 20);
create table mc3p4 partition of mc3p for values from (10, 10, 20) to (10, maxvalue, maxvalue);
create table mc3p5 partition of mc3p for values from (11, 1, 1) to (20, 10, 10);
create table mc3p6 partition of mc3p for values from (20, 10, 10) to (20, 20, 20);
create table mc3p7 partition of mc3p for values from (20, 20, 20) to (maxvalue, maxvalue, maxvalue);
explain (costs off) select * from mc3p where a = 1;
              QUERY PLAN              
--------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1
   ->  Append
         ->  Seq Scan on mc3p0
               Filter: (a = 1)
         ->  Seq Scan on mc3p1
               Filter: (a = 1)
         ->  Seq Scan on mc3p_default
               Filter: (a = 1)
(9 rows)

explain (costs off) select * from mc3p where a = 1 and abs(b) < 1;
                    QUERY PLAN                    
--------------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1
   ->  Append
         ->  Seq Scan on mc3p0
               Filter: ((a = 1) AND (abs(b) < 1))
         ->  Seq Scan on mc3p_default
               Filter: ((a = 1) AND (abs(b) < 1))
(7 rows)

explain (costs off) select * from mc3p where a = 1 and abs(b) = 1;
                    QUERY PLAN                    
--------------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1
   ->  Append
         ->  Seq Scan on mc3p0
               Filter: ((a = 1) AND (abs(b) = 1))
         ->  Seq Scan on mc3p1
               Filter: ((a = 1) AND (abs(b) = 1))
         ->  Seq Scan on mc3p_default
               Filter: ((a = 1) AND (abs(b) = 1))
(9 rows)

explain (costs off) select * from mc3p where a = 1 and abs(b) = 1 and c < 8;
                          QUERY PLAN                          
--------------------------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1
   ->  Append
         ->  Seq Scan on mc3p0
               Filter: ((c < 8) AND (a = 1) AND (abs(b) = 1))
         ->  Seq Scan on mc3p1
               Filter: ((c < 8) AND (a = 1) AND (abs(b) = 1))
(7 rows)

explain (costs off) select * from mc3p where a = 10 and abs(b) between 5 and 35;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_2
   ->  Append
         ->  Seq Scan on mc3p1
               Filter: ((a = 10) AND (abs(b) >= 5) AND (abs(b) <= 35))
         ->  Seq Scan on mc3p2
               Filter: ((a = 10) AND (abs(b) >= 5) AND (abs(b) <= 35))
         ->  Seq Scan on mc3p3
               Filter: ((a = 10) AND (abs(b) >= 5) AND (abs(b) <= 35))
         ->  Seq Scan on mc3p4
               Filter: ((a = 10) AND (abs(b) >= 5) AND (abs(b) <= 35))
         ->  Seq Scan on mc3p_default
               Filter: ((a = 10) AND (abs(b) >= 5) AND (abs(b) <= 35))
(13 rows)

explain (costs off) select * from mc3p where a > 10;
              QUERY PLAN              
--------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on mc3p5
               Filter: (a > 10)
         ->  Seq Scan on mc3p6
               Filter: (a > 10)
         ->  Seq Scan on mc3p7
               Filter: (a > 10)
         ->  Seq Scan on mc3p_default
               Filter: (a > 10)
(11 rows)

explain (costs off) select * from mc3p where a >= 10;
              QUERY PLAN              
--------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on mc3p1
               Filter: (a >= 10)
         ->  Seq Scan on mc3p2
               Filter: (a >= 10)
         ->  Seq Scan on mc3p3
               Filter: (a >= 10)
         ->  Seq Scan on mc3p4
               Filter: (a >= 10)
         ->  Seq Scan on mc3p5
               Filter: (a >= 10)
         ->  Seq Scan on mc3p6
               Filter: (a >= 10)
         ->  Seq Scan on mc3p7
               Filter: (a >= 10)
         ->  Seq Scan on mc3p_default
               Filter: (a >= 10)
(19 rows)

explain (costs off) select * from mc3p where a < 10;
              QUERY PLAN              
--------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on mc3p0
               Filter: (a < 10)
         ->  Seq Scan on mc3p1
               Filter: (a < 10)
         ->  Seq Scan on mc3p_default
               Filter: (a < 10)
(9 rows)

explain (costs off) select * from mc3p where a <= 10 and abs(b) < 10;
                     QUERY PLAN                      
-----------------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on mc3p0
               Filter: ((a <= 10) AND (abs(b) < 10))
         ->  Seq Scan on mc3p1
               Filter: ((a <= 10) AND (abs(b) < 10))
         ->  Seq Scan on mc3p2
               Filter: ((a <= 10) AND (abs(b) < 10))
         ->  Seq Scan on mc3p_default
               Filter: ((a <= 10) AND (abs(b) < 10))
(11 rows)

explain (costs off) select * from mc3p where a = 11 and abs(b) = 0;
                    QUERY PLAN                     
---------------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_2
   ->  Append
         ->  Seq Scan on mc3p_default
               Filter: ((a = 11) AND (abs(b) = 0))
(5 rows)

explain (costs off) select * from mc3p where a = 20 and abs(b) = 10 and c = 100;
                            QUERY PLAN                            
------------------------------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_2
   ->  Append
         ->  Seq Scan on mc3p6
               Filter: ((a = 20) AND (c = 100) AND (abs(b) = 10))
(5 rows)

explain (costs off) select * from mc3p where a > 20;
              QUERY PLAN              
--------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on mc3p7
               Filter: (a > 20)
         ->  Seq Scan on mc3p_default
               Filter: (a > 20)
(7 rows)

explain (costs off) select * from mc3p where a >= 20;
              QUERY PLAN              
--------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on mc3p5
               Filter: (a >= 20)
         ->  Seq Scan on mc3p6
               Filter: (a >= 20)
         ->  Seq Scan on mc3p7
               Filter: (a >= 20)
         ->  Seq Scan on mc3p_default
               Filter: (a >= 20)
(11 rows)

explain (costs off) select * from mc3p where (a = 1 and abs(b) = 1 and c = 1) or (a = 10 and abs(b) = 5 and c = 10) or (a > 11 and a < 20);
                                                              QUERY PLAN                                                               
---------------------------------------------------------------------------------------------------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on mc3p1
               Filter: (((a = 1) AND (abs(b) = 1) AND (c = 1)) OR ((a = 10) AND (abs(b) = 5) AND (c = 10)) OR ((a > 11) AND (a < 20)))
         ->  Seq Scan on mc3p2
               Filter: (((a = 1) AND (abs(b) = 1) AND (c = 1)) OR ((a = 10) AND (abs(b) = 5) AND (c = 10)) OR ((a > 11) AND (a < 20)))
         ->  Seq Scan on mc3p5
               Filter: (((a = 1) AND (abs(b) = 1) AND (c = 1)) OR ((a = 10) AND (abs(b) = 5) AND (c = 10)) OR ((a > 11) AND (a < 20)))
         ->  Seq Scan on mc3p_default
               Filter: (((a = 1) AND (abs(b) = 1) AND (c = 1)) OR ((a = 10) AND (abs(b) = 5) AND (c = 10)) OR ((a > 11) AND (a < 20)))
(11 rows)

explain (costs off) select * from mc3p where (a = 1 and abs(b) = 1 and c = 1) or (a = 10 and abs(b) = 5 and c = 10) or (a > 11 and a < 20) or a < 1;
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on mc3p0
               Filter: (((a = 1) AND (abs(b) = 1) AND (c = 1)) OR ((a = 10) AND (abs(b) = 5) AND (c = 10)) OR ((a > 11) AND (a < 20)) OR (a < 1))
         ->  Seq Scan on mc3p1
               Filter: (((a = 1) AND (abs(b) = 1) AND (c = 1)) OR ((a = 10) AND (abs(b) = 5) AND (c = 10)) OR ((a > 11) AND (a < 20)) OR (a < 1))
         ->  Seq Scan on mc3p2
               Filter: (((a = 1) AND (abs(b) = 1) AND (c = 1)) OR ((a = 10) AND (abs(b) = 5) AND (c = 10)) OR ((a > 11) AND (a < 20)) OR (a < 1))
         ->  Seq Scan on mc3p5
               Filter: (((a = 1) AND (abs(b) = 1) AND (c = 1)) OR ((a = 10) AND (abs(b) = 5) AND (c = 10)) OR ((a > 11) AND (a < 20)) OR (a < 1))
         ->  Seq Scan on mc3p_default
               Filter: (((a = 1) AND (abs(b) = 1) AND (c = 1)) OR ((a = 10) AND (abs(b) = 5) AND (c = 10)) OR ((a > 11) AND (a < 20)) OR (a < 1))
(13 rows)

explain (costs off) select * from mc3p where (a = 1 and abs(b) = 1 and c = 1) or (a = 10 and abs(b) = 5 and c = 10) or (a > 11 and a < 20) or a < 1 or a = 1;
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on mc3p0
               Filter: (((a = 1) AND (abs(b) = 1) AND (c = 1)) OR ((a = 10) AND (abs(b) = 5) AND (c = 10)) OR ((a > 11) AND (a < 20)) OR (a < 1) OR (a = 1))
         ->  Seq Scan on mc3p1
               Filter: (((a = 1) AND (abs(b) = 1) AND (c = 1)) OR ((a = 10) AND (abs(b) = 5) AND (c = 10)) OR ((a > 11) AND (a < 20)) OR (a < 1) OR (a = 1))
         ->  Seq Scan on mc3p2
               Filter: (((a = 1) AND (abs(b) = 1) AND (c = 1)) OR ((a = 10) AND (abs(b) = 5) AND (c = 10)) OR ((a > 11) AND (a < 20)) OR (a < 1) OR (a = 1))
         ->  Seq Scan on mc3p5
               Filter: (((a = 1) AND (abs(b) = 1) AND (c = 1)) OR ((a = 10) AND (abs(b) = 5) AND (c = 10)) OR ((a > 11) AND (a < 20)) OR (a < 1) OR (a = 1))
         ->  Seq Scan on mc3p_default
               Filter: (((a = 1) AND (abs(b) = 1) AND (c = 1)) OR ((a = 10) AND (abs(b) = 5) AND (c = 10)) OR ((a > 11) AND (a < 20)) OR (a < 1) OR (a = 1))
(13 rows)

explain (costs off) select * from mc3p where a = 1 or abs(b) = 1 or c = 1;
                         QUERY PLAN                         
------------------------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on mc3p0
               Filter: ((a = 1) OR (abs(b) = 1) OR (c = 1))
         ->  Seq Scan on mc3p1
               Filter: ((a = 1) OR (abs(b) = 1) OR (c = 1))
         ->  Seq Scan on mc3p2
               Filter: ((a = 1) OR (abs(b) = 1) OR (c = 1))
         ->  Seq Scan on mc3p3
               Filter: ((a = 1) OR (abs(b) = 1) OR (c = 1))
         ->  Seq Scan on mc3p4
               Filter: ((a = 1) OR (abs(b) = 1) OR (c = 1))
         ->  Seq Scan on mc3p5
               Filter: ((a = 1) OR (abs(b) = 1) OR (c = 1))
         ->  Seq Scan on mc3p6
               Filter: ((a = 1) OR (abs(b) = 1) OR (c = 1))
         ->  Seq Scan on mc3p7
               Filter: ((a = 1) OR (abs(b) = 1) OR (c = 1))
         ->  Seq Scan on mc3p_default
               Filter: ((a = 1) OR (abs(b) = 1) OR (c = 1))
(21 rows)

explain (costs off) select * from mc3p where (a = 1 and abs(b) = 1) or (a = 10 and abs(b) = 10);
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on mc3p0
               Filter: (((a = 1) AND (abs(b) = 1)) OR ((a = 10) AND (abs(b) = 10)))
         ->  Seq Scan on mc3p1
               Filter: (((a = 1) AND (abs(b) = 1)) OR ((a = 10) AND (abs(b) = 10)))
         ->  Seq Scan on mc3p2
               Filter: (((a = 1) AND (abs(b) = 1)) OR ((a = 10) AND (abs(b) = 10)))
         ->  Seq Scan on mc3p3
               Filter: (((a = 1) AND (abs(b) = 1)) OR ((a = 10) AND (abs(b) = 10)))
         ->  Seq Scan on mc3p4
               Filter: (((a = 1) AND (abs(b) = 1)) OR ((a = 10) AND (abs(b) = 10)))
         ->  Seq Scan on mc3p_default
               Filter: (((a = 1) AND (abs(b) = 1)) OR ((a = 10) AND (abs(b) = 10)))
(15 rows)

explain (costs off) select * from mc3p where (a = 1 and abs(b) = 1) or (a = 10 and abs(b) = 9);
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on mc3p0
               Filter: (((a = 1) AND (abs(b) = 1)) OR ((a = 10) AND (abs(b) = 9)))
         ->  Seq Scan on mc3p1
               Filter: (((a = 1) AND (abs(b) = 1)) OR ((a = 10) AND (abs(b) = 9)))
         ->  Seq Scan on mc3p2
               Filter: (((a = 1) AND (abs(b) = 1)) OR ((a = 10) AND (abs(b) = 9)))
         ->  Seq Scan on mc3p_default
               Filter: (((a = 1) AND (abs(b) = 1)) OR ((a = 10) AND (abs(b) = 9)))
(11 rows)

-- a simpler multi-column keys case
create table mc2p (a int, b int) partition by range (a, b);
create table mc2p_default partition of mc2p default;
create table mc2p0 partition of mc2p for values from (minvalue, minvalue) to (1, minvalue);
create table mc2p1 partition of mc2p for values from (1, minvalue) to (1, 1);
create table mc2p2 partition of mc2p for values from (1, 1) to (2, minvalue);
create table mc2p3 partition of mc2p for values from (2, minvalue) to (2, 1);
create table mc2p4 partition of mc2p for values from (2, 1) to (2, maxvalue);
create table mc2p5 partition of mc2p for values from (2, maxvalue) to (maxvalue, maxvalue);
explain (costs off) select * from mc2p where a < 2;
              QUERY PLAN              
--------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on mc2p0
               Filter: (a < 2)
         ->  Seq Scan on mc2p1
               Filter: (a < 2)
         ->  Seq Scan on mc2p2
               Filter: (a < 2)
         ->  Seq Scan on mc2p_default
               Filter: (a < 2)
(11 rows)

explain (costs off) select * from mc2p where a = 2 and b < 1;
                 QUERY PLAN                  
---------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1
   ->  Append
         ->  Seq Scan on mc2p3
               Filter: ((b < 1) AND (a = 2))
(5 rows)

explain (costs off) select * from mc2p where a > 1;
              QUERY PLAN              
--------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on mc2p2
               Filter: (a > 1)
         ->  Seq Scan on mc2p3
               Filter: (a > 1)
         ->  Seq Scan on mc2p4
               Filter: (a > 1)
         ->  Seq Scan on mc2p5
               Filter: (a > 1)
         ->  Seq Scan on mc2p_default
               Filter: (a > 1)
(13 rows)

explain (costs off) select * from mc2p where a = 1 and b > 1;
                 QUERY PLAN                  
---------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1
   ->  Append
         ->  Seq Scan on mc2p2
               Filter: ((b > 1) AND (a = 1))
(5 rows)

-- all partitions but the default one should be pruned
explain (costs off) select * from mc2p where a = 1 and b is null;
                   QUERY PLAN                    
-------------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1
   ->  Append
         ->  Seq Scan on mc2p_default
               Filter: ((b IS NULL) AND (a = 1))
(5 rows)

explain (costs off) select * from mc2p where a is null and b is null;
                     QUERY PLAN                      
-----------------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on mc2p_default
               Filter: ((a IS NULL) AND (b IS NULL))
(5 rows)

explain (costs off) select * from mc2p where a is null and b = 1;
                   QUERY PLAN                    
-------------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on mc2p_default
               Filter: ((a IS NULL) AND (b = 1))
(5 rows)

explain (costs off) select * from mc2p where a is null;
              QUERY PLAN              
--------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on mc2p_default
               Filter: (a IS NULL)
(5 rows)

explain (costs off) select * from mc2p where b is null;
              QUERY PLAN              
--------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on mc2p_default
               Filter: (b IS NULL)
(5 rows)

-- boolean partitioning
create table boolpart (a bool) partition by list (a);
create table boolpart_default partition of boolpart default;
create table boolpart_t partition of boolpart for values in ('true');
create table boolpart_f partition of boolpart for values in ('false');
explain (costs off) select * from boolpart where a in (true, false);
                      QUERY PLAN                      
------------------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on boolpart_f
               Filter: (a = ANY ('{t,f}'::boolean[]))
         ->  Seq Scan on boolpart_t
               Filter: (a = ANY ('{t,f}'::boolean[]))
(7 rows)

explain (costs off) select * from boolpart where a = false;
             QUERY PLAN             
------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_2
   ->  Append
         ->  Seq Scan on boolpart_f
               Filter: (NOT a)
(5 rows)

explain (costs off) select * from boolpart where not a = false;
             QUERY PLAN             
------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on boolpart_t
               Filter: a
(5 rows)

explain (costs off) select * from boolpart where a is true or a is not true;
                       QUERY PLAN                       
--------------------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on boolpart_f
               Filter: ((a IS TRUE) OR (a IS NOT TRUE))
         ->  Seq Scan on boolpart_t
               Filter: ((a IS TRUE) OR (a IS NOT TRUE))
(7 rows)

explain (costs off) select * from boolpart where a is not true;
              QUERY PLAN               
---------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on boolpart_f
               Filter: (a IS NOT TRUE)
(5 rows)

explain (costs off) select * from boolpart where a is not true and a is not false;
            QUERY PLAN            
----------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Result
         One-Time Filter: false
(4 rows)

explain (costs off) select * from boolpart where a is unknown;
                QUERY PLAN                
------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on boolpart_f
               Filter: (a IS UNKNOWN)
         ->  Seq Scan on boolpart_t
               Filter: (a IS UNKNOWN)
         ->  Seq Scan on boolpart_default
               Filter: (a IS UNKNOWN)
(9 rows)

explain (costs off) select * from boolpart where a is not unknown;
                QUERY PLAN                
------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on boolpart_f
               Filter: (a IS NOT UNKNOWN)
         ->  Seq Scan on boolpart_t
               Filter: (a IS NOT UNKNOWN)
         ->  Seq Scan on boolpart_default
               Filter: (a IS NOT UNKNOWN)
(9 rows)

create table boolrangep (a bool, b bool, c int) partition by range (a,b,c);
create table boolrangep_tf partition of boolrangep for values from ('true', 'false', 0) to ('true', 'false', 100);
create table boolrangep_ft partition of boolrangep for values from ('false', 'true', 0) to ('false', 'true', 100);
create table boolrangep_ff1 partition of boolrangep for values from ('false', 'false', 0) to ('false', 'false', 50);
create table boolrangep_ff2 partition of boolrangep for values from ('false', 'false', 50) to ('false', 'false', 100);
-- try a more complex case that's been known to trip up pruning in the past
explain (costs off)  select * from boolrangep where not a and not b and c = 25;
                        QUERY PLAN                        
----------------------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on boolrangep_ff1
               Filter: ((NOT a) AND (NOT b) AND (c = 25))
(5 rows)

-- test scalar-to-array operators
create table coercepart (a varchar) partition by list (a);
create table coercepart_ab partition of coercepart for values in ('ab');
create table coercepart_bc partition of coercepart for values in ('bc');
create table coercepart_cd partition of coercepart for values in ('cd');
explain (costs off) select * from coercepart where a in ('ab', to_char(125, '999'));
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on coercepart_ab
               Filter: ((a)::text = ANY (ARRAY['ab'::text, (to_char(125, '999'::text))::text]))
         ->  Seq Scan on coercepart_bc
               Filter: ((a)::text = ANY (ARRAY['ab'::text, (to_char(125, '999'::text))::text]))
         ->  Seq Scan on coercepart_cd
               Filter: ((a)::text = ANY (ARRAY['ab'::text, (to_char(125, '999'::text))::text]))
(9 rows)

explain (costs off) select * from coercepart where a ~ any ('{ab}');
                        QUERY PLAN                        
----------------------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on coercepart_ab
               Filter: ((a)::text ~ ANY ('{ab}'::text[]))
         ->  Seq Scan on coercepart_bc
               Filter: ((a)::text ~ ANY ('{ab}'::text[]))
         ->  Seq Scan on coercepart_cd
               Filter: ((a)::text ~ ANY ('{ab}'::text[]))
(9 rows)

explain (costs off) select * from coercepart where a !~ all ('{ab}');
                        QUERY PLAN                         
-----------------------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on coercepart_ab
               Filter: ((a)::text !~ ALL ('{ab}'::text[]))
         ->  Seq Scan on coercepart_bc
               Filter: ((a)::text !~ ALL ('{ab}'::text[]))
         ->  Seq Scan on coercepart_cd
               Filter: ((a)::text !~ ALL ('{ab}'::text[]))
(9 rows)

explain (costs off) select * from coercepart where a ~ any ('{ab,bc}');
                         QUERY PLAN                          
-------------------------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on coercepart_ab
               Filter: ((a)::text ~ ANY ('{ab,bc}'::text[]))
         ->  Seq Scan on coercepart_bc
               Filter: ((a)::text ~ ANY ('{ab,bc}'::text[]))
         ->  Seq Scan on coercepart_cd
               Filter: ((a)::text ~ ANY ('{ab,bc}'::text[]))
(9 rows)

explain (costs off) select * from coercepart where a !~ all ('{ab,bc}');
                          QUERY PLAN                          
--------------------------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on coercepart_ab
               Filter: ((a)::text !~ ALL ('{ab,bc}'::text[]))
         ->  Seq Scan on coercepart_bc
               Filter: ((a)::text !~ ALL ('{ab,bc}'::text[]))
         ->  Seq Scan on coercepart_cd
               Filter: ((a)::text !~ ALL ('{ab,bc}'::text[]))
(9 rows)

drop table coercepart;
CREATE TABLE part (a INT, b INT) PARTITION BY LIST (a);
CREATE TABLE part_p1 PARTITION OF part FOR VALUES IN (-2,-1,0,1,2);
CREATE TABLE part_p2 PARTITION OF part DEFAULT PARTITION BY RANGE(a);
CREATE TABLE part_p2_p1 PARTITION OF part_p2 DEFAULT;
INSERT INTO part VALUES (-1,-1), (1,1), (2,NULL), (NULL,-2),(NULL,NULL);
EXPLAIN (COSTS OFF) SELECT tableoid::regclass as part, a, b FROM part WHERE a IS NULL ORDER BY 1, 2, 3;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Remote Subquery Scan on all (datanode_1,datanode_2)
   ->  Sort
         Sort Key: ((part_p2_p1.tableoid)::regclass), part_p2_p1.a, part_p2_p1.b
         ->  Result
               ->  Append
                     ->  Seq Scan on part_p2_p1
                           Filter: (a IS NULL)
(7 rows)

--
-- some more cases
--
--
-- pruning for partitioned table appearing inside a sub-query
--
-- pruning won't work for mc3p, because some keys are Params
explain (costs off) select * from mc2p t1, lateral (select count(*) from mc3p t2 where t2.a = t1.b and abs(t2.b) = 1 and t2.c = 1) s where t1.a = 1;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Nested Loop
   ->  Remote Subquery Scan on all (datanode_1)
         ->  Append
               ->  Seq Scan on mc2p1 t1
                     Filter: (a = 1)
               ->  Seq Scan on mc2p2 t1_1
                     Filter: (a = 1)
               ->  Seq Scan on mc2p_default t1_2
                     Filter: (a = 1)
   ->  Finalize Aggregate
         ->  Materialize
               ->  Remote Subquery Scan on all (datanode_1,datanode_2)
                     ->  Partial Aggregate
                           ->  Append
                                 ->  Seq Scan on mc3p0 t2
                                       Filter: ((a = b) AND (c = 1) AND (abs(b) = 1))
                                 ->  Seq Scan on mc3p1 t2_1
                                       Filter: ((a = b) AND (c = 1) AND (abs(b) = 1))
                                 ->  Seq Scan on mc3p2 t2_2
                                       Filter: ((a = b) AND (c = 1) AND (abs(b) = 1))
                                 ->  Seq Scan on mc3p3 t2_3
                                       Filter: ((a = b) AND (c = 1) AND (abs(b) = 1))
                                 ->  Seq Scan on mc3p4 t2_4
                                       Filter: ((a = b) AND (c = 1) AND (abs(b) = 1))
                                 ->  Seq Scan on mc3p5 t2_5
                                       Filter: ((a = b) AND (c = 1) AND (abs(b) = 1))
                                 ->  Seq Scan on mc3p6 t2_6
                                       Filter: ((a = b) AND (c = 1) AND (abs(b) = 1))
                                 ->  Seq Scan on mc3p7 t2_7
                                       Filter: ((a = b) AND (c = 1) AND (abs(b) = 1))
                                 ->  Seq Scan on mc3p_default t2_8
                                       Filter: ((a = b) AND (c = 1) AND (abs(b) = 1))
(32 rows)

-- pruning should work fine, because values for a prefix of keys (a, b) are
-- available
explain (costs off) select * from mc2p t1, lateral (select count(*) from mc3p t2 where t2.c = t1.b and abs(t2.b) = 1 and t2.a = 1) s where t1.a = 1;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Nested Loop
   ->  Remote Subquery Scan on all (datanode_1)
         ->  Append
               ->  Seq Scan on mc2p1 t1
                     Filter: (a = 1)
               ->  Seq Scan on mc2p2 t1_1
                     Filter: (a = 1)
               ->  Seq Scan on mc2p_default t1_2
                     Filter: (a = 1)
   ->  Finalize Aggregate
         ->  Materialize
               ->  Remote Subquery Scan on all (datanode_1)
                     ->  Partial Aggregate
                           ->  Append
                                 ->  Seq Scan on mc3p0 t2
                                       Filter: ((c = b) AND (a = 1) AND (abs(b) = 1))
                                 ->  Seq Scan on mc3p1 t2_1
                                       Filter: ((c = b) AND (a = 1) AND (abs(b) = 1))
                                 ->  Seq Scan on mc3p_default t2_2
                                       Filter: ((c = b) AND (a = 1) AND (abs(b) = 1))
(20 rows)

-- also here, because values for all keys are provided
explain (costs off) select * from mc2p t1, lateral (select count(*) from mc3p t2 where t2.a = 1 and abs(t2.b) = 1 and t2.c = 1) s where t1.a = 1;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Nested Loop
   ->  Finalize Aggregate
         ->  Remote Subquery Scan on all (datanode_1)
               ->  Partial Aggregate
                     ->  Append
                           ->  Seq Scan on mc3p1 t2
                                 Filter: ((a = 1) AND (c = 1) AND (abs(b) = 1))
   ->  Materialize
         ->  Remote Subquery Scan on all (datanode_1)
               ->  Append
                     ->  Seq Scan on mc2p1 t1
                           Filter: (a = 1)
                     ->  Seq Scan on mc2p2 t1_1
                           Filter: (a = 1)
                     ->  Seq Scan on mc2p_default t1_2
                           Filter: (a = 1)
(16 rows)

--
-- pruning with clauses containing <> operator
--
-- doesn't prune range partitions
create table rp (a int) partition by range (a);
create table rp0 partition of rp for values from (minvalue) to (1);
create table rp1 partition of rp for values from (1) to (2);
create table rp2 partition of rp for values from (2) to (maxvalue);
explain (costs off) select * from rp where a <> 1;
            QUERY PLAN            
----------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on rp0
               Filter: (a <> 1)
         ->  Seq Scan on rp1
               Filter: (a <> 1)
         ->  Seq Scan on rp2
               Filter: (a <> 1)
(9 rows)

explain (costs off) select * from rp where a <> 1 and a <> 2;
                  QUERY PLAN                   
-----------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on rp0
               Filter: ((a <> 1) AND (a <> 2))
         ->  Seq Scan on rp1
               Filter: ((a <> 1) AND (a <> 2))
         ->  Seq Scan on rp2
               Filter: ((a <> 1) AND (a <> 2))
(9 rows)

-- null partition should be eliminated due to strict <> clause.
explain (costs off) select * from lp where a <> 'a';
                QUERY PLAN                
------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on lp_ad
               Filter: (a <> 'a'::bpchar)
         ->  Seq Scan on lp_bc
               Filter: (a <> 'a'::bpchar)
         ->  Seq Scan on lp_ef
               Filter: (a <> 'a'::bpchar)
         ->  Seq Scan on lp_g
               Filter: (a <> 'a'::bpchar)
         ->  Seq Scan on lp_default
               Filter: (a <> 'a'::bpchar)
(13 rows)

-- ensure we detect contradictions in clauses; a can't be NULL and NOT NULL.
explain (costs off) select * from lp where a <> 'a' and a is null;
            QUERY PLAN            
----------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Result
         One-Time Filter: false
(4 rows)

explain (costs off) select * from lp where (a <> 'a' and a <> 'd') or a is null;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on lp_bc
               Filter: (((a <> 'a'::bpchar) AND (a <> 'd'::bpchar)) OR (a IS NULL))
         ->  Seq Scan on lp_ef
               Filter: (((a <> 'a'::bpchar) AND (a <> 'd'::bpchar)) OR (a IS NULL))
         ->  Seq Scan on lp_g
               Filter: (((a <> 'a'::bpchar) AND (a <> 'd'::bpchar)) OR (a IS NULL))
         ->  Seq Scan on lp_null
               Filter: (((a <> 'a'::bpchar) AND (a <> 'd'::bpchar)) OR (a IS NULL))
         ->  Seq Scan on lp_default
               Filter: (((a <> 'a'::bpchar) AND (a <> 'd'::bpchar)) OR (a IS NULL))
(13 rows)

-- check that it also works for a partitioned table that's not root,
-- which in this case are partitions of rlp that are themselves
-- list-partitioned on b
explain (costs off) select * from rlp where a = 15 and b <> 'ab' and b <> 'cd' and b <> 'xy' and b is not null;
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1
   ->  Append
         ->  Seq Scan on rlp3efgh
               Filter: ((b IS NOT NULL) AND ((b)::text <> 'ab'::text) AND ((b)::text <> 'cd'::text) AND ((b)::text <> 'xy'::text) AND (a = 15))
         ->  Seq Scan on rlp3_default
               Filter: ((b IS NOT NULL) AND ((b)::text <> 'ab'::text) AND ((b)::text <> 'cd'::text) AND ((b)::text <> 'xy'::text) AND (a = 15))
(7 rows)

--
-- different collations for different keys with same expression
--
create table coll_pruning_multi (a text) partition by range (substr(a, 1) collate "POSIX", substr(a, 1) collate "C");
create table coll_pruning_multi1 partition of coll_pruning_multi for values from ('a', 'a') to ('a', 'e');
create table coll_pruning_multi2 partition of coll_pruning_multi for values from ('a', 'e') to ('a', 'z');
create table coll_pruning_multi3 partition of coll_pruning_multi for values from ('b', 'a') to ('b', 'e');
-- no pruning, because no value for the leading key
explain (costs off) select * from coll_pruning_multi where substr(a, 1) = 'e' collate "C";
                          QUERY PLAN                          
--------------------------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on coll_pruning_multi1
               Filter: (substr(a, 1) = 'e'::text COLLATE "C")
         ->  Seq Scan on coll_pruning_multi2
               Filter: (substr(a, 1) = 'e'::text COLLATE "C")
         ->  Seq Scan on coll_pruning_multi3
               Filter: (substr(a, 1) = 'e'::text COLLATE "C")
(9 rows)

-- pruning, with a value provided for the leading key
explain (costs off) select * from coll_pruning_multi where substr(a, 1) = 'a' collate "POSIX";
                            QUERY PLAN                            
------------------------------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on coll_pruning_multi1
               Filter: (substr(a, 1) = 'a'::text COLLATE "POSIX")
         ->  Seq Scan on coll_pruning_multi2
               Filter: (substr(a, 1) = 'a'::text COLLATE "POSIX")
(7 rows)

-- pruning, with values provided for both keys
explain (costs off) select * from coll_pruning_multi where substr(a, 1) = 'e' collate "C" and substr(a, 1) = 'a' collate "POSIX";
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on coll_pruning_multi2
               Filter: ((substr(a, 1) = 'e'::text COLLATE "C") AND (substr(a, 1) = 'a'::text COLLATE "POSIX"))
(5 rows)

--
-- LIKE operators don't prune
--
create table like_op_noprune (a text) partition by list (a);
create table like_op_noprune1 partition of like_op_noprune for values in ('ABC');
create table like_op_noprune2 partition of like_op_noprune for values in ('BCD');
explain (costs off) select * from like_op_noprune where a like '%BC';
                QUERY PLAN                
------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on like_op_noprune1
               Filter: (a ~~ '%BC'::text)
         ->  Seq Scan on like_op_noprune2
               Filter: (a ~~ '%BC'::text)
(7 rows)

--
-- tests wherein clause value requires a cross-type comparison function
--
create table lparted_by_int2 (a smallint) partition by list (a);
create table lparted_by_int2_1 partition of lparted_by_int2 for values in (1);
create table lparted_by_int2_16384 partition of lparted_by_int2 for values in (16384);
explain (costs off) select * from lparted_by_int2 where a = 100000000000000;
ERROR:  smallint out of range
create table rparted_by_int2 (a smallint) partition by range (a);
create table rparted_by_int2_1 partition of rparted_by_int2 for values from (1) to (10);
create table rparted_by_int2_16384 partition of rparted_by_int2 for values from (10) to (16384);
-- all partitions pruned
explain (costs off) select * from rparted_by_int2 where a > 100000000000000;
            QUERY PLAN            
----------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Result
         One-Time Filter: false
(4 rows)

create table rparted_by_int2_maxvalue partition of rparted_by_int2 for values from (16384) to (maxvalue);
-- all partitions but rparted_by_int2_maxvalue pruned
explain (costs off) select * from rparted_by_int2 where a > 100000000000000;
                      QUERY PLAN                       
-------------------------------------------------------
 Remote Fast Query Execution
   Node/s: datanode_1, datanode_2
   ->  Append
         ->  Seq Scan on rparted_by_int2_maxvalue
               Filter: (a > '100000000000000'::bigint)
(5 rows)

drop table lp, coll_pruning, rlp, mc3p, mc2p, boolpart, boolrangep, rp, coll_pruning_multi, like_op_noprune, lparted_by_int2, rparted_by_int2;
--
-- Check that pruning with composite range partitioning works correctly when
-- it must ignore clauses for trailing keys once it has seen a clause with
-- non-inclusive operator for an earlier key
--
create table mc3p (a int, b int, c int) partition by range (a, abs(b), c);
create table mc3p0 partition of mc3p
  for values from (0, 0, 0) to (0, maxvalue, maxvalue);
create table mc3p1 partition of mc3p
  for values from (1, 1, 1) to (2, minvalue, minvalue);
create table mc3p2 partition of mc3p
  for values from (2, minvalue, minvalue) to (3, maxvalue, maxvalue);
insert into mc3p values (0, 1, 1), (1, 1, 1), (2, 1, 1);
explain (analyze, costs off, summary off, timing off)
select * from mc3p where a < 3 and abs(b) = 1;
                     QUERY PLAN                      
-----------------------------------------------------
 Remote Fast Query Execution (actual rows=3 loops=1)
   Node/s: datanode_1, datanode_2
(2 rows)

drop table mc3p;
