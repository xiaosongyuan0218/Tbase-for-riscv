-- test nestloop by shard
drop table if exists int8_tbl_s;
NOTICE:  table "int8_tbl_s" does not exist, skipping
drop table if exists int4_tbl_s;
NOTICE:  table "int4_tbl_s" does not exist, skipping
drop table if exists tenk1_s;
NOTICE:  table "tenk1_s" does not exist, skipping
drop table if exists onek_s;
NOTICE:  table "onek_s" does not exist, skipping
CREATE TABLE int8_tbl_s(q1 int8, q2 int8) distribute by shard(q1);
NOTICE:  Replica identity is needed for shard table, please add to this table through "alter table" command.
INSERT INTO int8_tbl_s VALUES('123','456');
INSERT INTO int8_tbl_s VALUES('123','4567890123456789');
INSERT INTO int8_tbl_s VALUES('4567890123456789','123');
INSERT INTO int8_tbl_s VALUES(+4567890123456789,'4567890123456789');
INSERT INTO int8_tbl_s VALUES('+4567890123456789','-4567890123456789');
CREATE TABLE int4_tbl_s(f1 int4) distribute by shard(f1);
NOTICE:  Replica identity is needed for shard table, please add to this table through "alter table" command.
INSERT INTO int4_tbl_s(f1) VALUES ('0');
INSERT INTO int4_tbl_s(f1) VALUES ('123456');
INSERT INTO int4_tbl_s(f1) VALUES ('-123456');
CREATE TABLE tenk1_s (
	unique1 int4,
	unique2 int4,
	two int4,
	four int4,
	ten int4,
	twenty int4,
	hundred int4,
	thousand int4,
	twothousand int4,
	fivethous int4,
	tenthous int4,
	odd int4,
	even int4,
	stringu1 name,
	stringu2 name,
	string4 name
) distribute by shard(unique1);
NOTICE:  Replica identity is needed for shard table, please add to this table through "alter table" command.
CREATE INDEX unique1_s ON tenk1_s USING btree(unique1 int4_ops);
CREATE INDEX unique2_s ON tenk1_s USING btree(unique2 int4_ops);
CREATE INDEX hundred_s ON tenk1_s USING btree(hundred int4_ops);
CREATE INDEX thous_tenthous_s ON tenk1_s (thousand, tenthous);
COPY tenk1_s FROM '/home/tbase/PG-XL-v10/src/test/regress/data/tenk.data';
CREATE TABLE onek_s (
	unique1 int4,
	unique2 int4,
	two int4,
	four int4,
	ten int4,
	twenty int4,
	hundred int4,
	thousand int4,
	twothousand int4,
	fivethous int4,
	tenthous int4,
	odd int4,
	even int4,
	stringu1 name,
	stringu2 name,
	string4 name
) distribute by shard(unique1);
NOTICE:  Replica identity is needed for shard table, please add to this table through "alter table" command.
CREATE INDEX onek_unique1_s ON onek_s USING btree(unique1 int4_ops);
CREATE INDEX onek_unique2_s ON onek_s USING btree(unique2 int4_ops);
CREATE INDEX onek_hundred_s ON onek_s USING btree(hundred int4_ops);
CREATE INDEX onek_stringu1_s ON onek_s USING btree(stringu1 name_ops);
COPY onek_s FROM '/home/tbase/PG-XL-v10/src/test/regress/data/onek.data';
set enable_hashjoin=off;
set enable_mergejoin=off;
set enable_nestloop=on;
explain (num_nodes off, nodes off, costs off)
select * from tenk1_s t1 left join
  (tenk1_s t2 join tenk1_s t3 on t2.thousand = t3.unique2)
  on t1.hundred = t2.hundred and t1.ten = t3.ten
where t1.unique1 = 1;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Remote Subquery Scan on all
   ->  Nested Loop Left Join
         ->  Remote Subquery Scan on all
               Distribute results by S: hundred
               ->  Index Scan using unique1_s on tenk1_s t1
                     Index Cond: (unique1 = 1)
         ->  Materialize
               ->  Remote Subquery Scan on all
                     Distribute results by S: hundred
                     ->  Nested Loop
                           Join Filter: (t1.ten = t3.ten)
                           ->  Remote Subquery Scan on all
                                 Distribute results by S: thousand
                                 ->  Index Scan using hundred_s on tenk1_s t2
                                       Index Cond: (t1.hundred = hundred)
                           ->  Materialize
                                 ->  Remote Subquery Scan on all
                                       Distribute results by S: unique2
                                       ->  Index Scan using unique2_s on tenk1_s t3
                                             Index Cond: (unique2 = t2.thousand)
(20 rows)

--select * from tenk1_s t1 left join
--  (tenk1_s t2 join tenk1_s t3 on t2.thousand = t3.unique2)
--  on t1.hundred = t2.hundred and t1.ten = t3.ten
--where t1.unique1 = 1;
explain (num_nodes off, nodes off, costs off)
select * from tenk1_s t1 left join
  (tenk1_s t2 join tenk1_s t3 on t2.thousand = t3.unique2)
  on t1.hundred = t2.hundred and t1.ten + t2.ten = t3.ten
where t1.unique1 = 1;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Remote Subquery Scan on all
   ->  Nested Loop Left Join
         ->  Remote Subquery Scan on all
               Distribute results by S: hundred
               ->  Index Scan using unique1_s on tenk1_s t1
                     Index Cond: (unique1 = 1)
         ->  Materialize
               ->  Remote Subquery Scan on all
                     Distribute results by S: hundred
                     ->  Nested Loop
                           Join Filter: ((t1.ten + t2.ten) = t3.ten)
                           ->  Remote Subquery Scan on all
                                 Distribute results by S: thousand
                                 ->  Index Scan using hundred_s on tenk1_s t2
                                       Index Cond: (t1.hundred = hundred)
                           ->  Materialize
                                 ->  Remote Subquery Scan on all
                                       Distribute results by S: unique2
                                       ->  Index Scan using unique2_s on tenk1_s t3
                                             Index Cond: (unique2 = t2.thousand)
(20 rows)

select * from tenk1_s t1 left join
  (tenk1_s t2 join tenk1_s t3 on t2.thousand = t3.unique2)
  on t1.hundred = t2.hundred and t1.ten + t2.ten = t3.ten
where t1.unique1 = 1;
 unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 | unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 | unique1 | unique2 | two | four | ten | twenty | hundred | thousand | twothousand | fivethous | tenthous | odd | even | stringu1 | stringu2 | string4 
---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------+---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------+---------+---------+-----+------+-----+--------+---------+----------+-------------+-----------+----------+-----+------+----------+----------+---------
       1 |    2838 |   1 |    1 |   1 |      1 |       1 |        1 |           1 |         1 |        1 |   2 |    3 | BAAAAA   | EFEAAA   | OOOOxx  |         |         |     |      |     |        |         |          |             |           |          |     |      |          |          |         |         |         |     |      |     |        |         |          |             |           |          |     |      |          |          | 
(1 row)

explain (num_nodes off, nodes off, costs off)
select * from
(
  select unique1, q1, coalesce(unique1, -1) + q1 as fault
  from int8_tbl_s left join tenk1_s on (q2 = unique2)
) ss
where fault = 122
order by fault;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Remote Subquery Scan on all
   ->  Nested Loop Left Join
         Join Filter: (int8_tbl_s.q2 = tenk1_s.unique2)
         Filter: ((COALESCE(tenk1_s.unique1, '-1'::integer) + int8_tbl_s.q1) = 122)
         ->  Seq Scan on int8_tbl_s
         ->  Materialize
               ->  Remote Subquery Scan on all
                     ->  Seq Scan on tenk1_s
(8 rows)

select * from
(
  select unique1, q1, coalesce(unique1, -1) + q1 as fault
  from int8_tbl_s left join tenk1_s on (q2 = unique2)
) ss
where fault = 122
order by fault;
 unique1 | q1  | fault 
---------+-----+-------
         | 123 |   122
(1 row)

explain (num_nodes off, nodes off, costs off)
select q1, unique2, thousand, hundred
  from int8_tbl_s a left join tenk1_s b on q1 = unique2
  where coalesce(thousand,123) = q1 and q1 = coalesce(hundred,123);
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Remote Subquery Scan on all
   ->  Nested Loop Left Join
         Join Filter: (a.q1 = b.unique2)
         Filter: ((COALESCE(b.thousand, 123) = a.q1) AND (a.q1 = COALESCE(b.hundred, 123)))
         ->  Seq Scan on int8_tbl_s a
         ->  Materialize
               ->  Remote Subquery Scan on all
                     Distribute results by S: COALESCE(thousand, 123)
                     ->  Seq Scan on tenk1_s b
(9 rows)

  
select q1, unique2, thousand, hundred
  from int8_tbl_s a left join tenk1_s b on q1 = unique2
  where coalesce(thousand,123) = q1 and q1 = coalesce(hundred,123);  
 q1 | unique2 | thousand | hundred 
----+---------+----------+---------
(0 rows)

  
explain (num_nodes off, nodes off, costs off)
select f1, unique2, case when unique2 is null then f1 else 0 end
  from int4_tbl_s a left join tenk1_s b on f1 = unique2
  where (case when unique2 is null then f1 else 0 end) = 0;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Remote Subquery Scan on all
   ->  Nested Loop Left Join
         Join Filter: (a.f1 = b.unique2)
         Filter: (CASE WHEN (b.unique2 IS NULL) THEN a.f1 ELSE 0 END = 0)
         ->  Seq Scan on int4_tbl_s a
         ->  Materialize
               ->  Remote Subquery Scan on all
                     Distribute results by S: unique2
                     ->  Seq Scan on tenk1_s b
(9 rows)

select f1, unique2, case when unique2 is null then f1 else 0 end
  from int4_tbl_s a left join tenk1_s b on f1 = unique2
  where (case when unique2 is null then f1 else 0 end) = 0;  
 f1 | unique2 | case 
----+---------+------
  0 |       0 |    0
(1 row)

  
explain (verbose, costs off)
select foo1.join_key as foo1_id, foo3.join_key AS foo3_id, bug_field from
  (values (0),(1)) foo1(join_key)
left join
  (select join_key, bug_field from
    (select ss1.join_key, ss1.bug_field from
      (select f1 as join_key, 666 as bug_field from int4_tbl_s i1) ss1
    ) foo2
   left join
    (select unique2 as join_key from tenk1_s i2) ss2
   using (join_key)
  ) foo3
using (join_key);
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Nested Loop Left Join
   Output: "*VALUES*".column1, i1.f1, (666)
   Join Filter: ("*VALUES*".column1 = i1.f1)
   ->  Values Scan on "*VALUES*"
         Output: "*VALUES*".column1
   ->  Materialize
         Output: i1.f1, (666)
         ->  Remote Subquery Scan on all (datanode_1,datanode_2)
               Output: i1.f1, 666
               ->  Nested Loop Left Join
                     Output: i1.f1, 666
                     Join Filter: (i1.f1 = i2.unique2)
                     ->  Seq Scan on public.int4_tbl_s i1
                           Output: i1.f1
                     ->  Materialize
                           Output: i2.unique2
                           ->  Remote Subquery Scan on all (datanode_1,datanode_2)
                                 Output: i2.unique2
                                 Distribute results by S: unique2
                                 ->  Seq Scan on public.tenk1_s i2
                                       Output: i2.unique2
(21 rows)

  
select foo1.join_key as foo1_id, foo3.join_key AS foo3_id, bug_field from
  (values (0),(1)) foo1(join_key)
left join
  (select join_key, bug_field from
    (select ss1.join_key, ss1.bug_field from
      (select f1 as join_key, 666 as bug_field from int4_tbl_s i1) ss1
    ) foo2
   left join
    (select unique2 as join_key from tenk1_s i2) ss2
   using (join_key)
  ) foo3
using (join_key);
 foo1_id | foo3_id | bug_field 
---------+---------+-----------
       0 |       0 |       666
       1 |         |          
(2 rows)

explain (verbose, costs off)
select t1.unique1, t2.hundred
from onek_s t1, tenk1_s t2
where exists (select 1 from tenk1_s t3
              where t3.thousand = t1.unique1 and t3.tenthous = t2.hundred)
      and t1.unique1 < 1;  
                                                                                                                   QUERY PLAN                                                                                                                    
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Remote Subquery Scan on all (datanode_1,datanode_2)
   Output: t1.unique1, t2.hundred
   ->  Nested Loop
         Output: t1.unique1, t2.hundred
         Join Filter: (t3.tenthous = t2.hundred)
         ->  Remote Subquery Scan on all (datanode_1,datanode_2)
               Output: t2.hundred
               Distribute results by S: hundred
               ->  Seq Scan on public.tenk1_s t2
                     Output: t2.hundred
         ->  Materialize
               Output: t1.unique1, t3.tenthous
               ->  Remote Subquery Scan on all (datanode_1,datanode_2)
                     Output: t1.unique1, t3.tenthous
                     Distribute results by S: tenthous
                     ->  Nested Loop
                           Output: t1.unique1, t3.tenthous
                           Join Filter: (t1.unique1 = t3.thousand)
                           ->  HashAggregate
                                 Output: t3.thousand, t3.tenthous
                                 Group Key: t3.thousand, t3.tenthous
                                 ->  Remote Subquery Scan on all (datanode_1,datanode_2)
                                       Output: t3.unique1, t3.unique2, t3.two, t3.four, t3.ten, t3.twenty, t3.hundred, t3.thousand, t3.twothousand, t3.fivethous, t3.tenthous, t3.odd, t3.even, t3.stringu1, t3.stringu2, t3.string4
                                       Distribute results by S: thousand
                                       ->  HashAggregate
                                             Output: t3.unique1, t3.unique2, t3.two, t3.four, t3.ten, t3.twenty, t3.hundred, t3.thousand, t3.twothousand, t3.fivethous, t3.tenthous, t3.odd, t3.even, t3.stringu1, t3.stringu2, t3.string4
                                             Group Key: t3.thousand, t3.tenthous
                                             ->  Seq Scan on public.tenk1_s t3
                                                   Output: t3.unique1, t3.unique2, t3.two, t3.four, t3.ten, t3.twenty, t3.hundred, t3.thousand, t3.twothousand, t3.fivethous, t3.tenthous, t3.odd, t3.even, t3.stringu1, t3.stringu2, t3.string4
                           ->  Materialize
                                 Output: t1.unique1
                                 ->  Remote Subquery Scan on all (datanode_1,datanode_2)
                                       Output: t1.unique1
                                       ->  Seq Scan on public.onek_s t1
                                             Output: t1.unique1
                                             Filter: (t1.unique1 < 1)
(36 rows)

--select t1.unique1, t2.hundred
--from onek_s t1, tenk1_s t2
--where exists (select 1 from tenk1_s t3
--              where t3.thousand = t1.unique1 and t3.tenthous = t2.hundred)
--      and t1.unique1 < 1;	  
  
reset enable_nestloop;
reset enable_hashjoin;
reset enable_mergejoin;
drop table int8_tbl_s;
drop table int4_tbl_s;
drop table tenk1_s;
drop table onek_s;
